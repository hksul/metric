 # -*- coding: utf-8 -*-
"""Metric Studio Replication part 1


Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yl8GOxB1heICQo_Lx8lQuEeF0YQWOvg6
"""

#!pip install -U finance-datareader

#import pip
#pip.main(['install', '-U', 'finance-datareader'])

import pandas as pd
import datetime

import FinanceDataReader as fdr
fdr.__version__

# https://m.kodex.com/product_view.do?fId=2ETF54
# 2015.10.01
url="https://m.kodex.com/excel_pdf.do?fId=2ETF54&gijunYMD=20220118"
#url="https://m.kodex.com/excel_pdf.do?fId=2ETF54&gijunYMD=20191001"
kosdaq150df=pd.read_excel(url, skiprows=2)
print(kosdaq150df.shape)
kosdaq150df.head()

# 'https://m.kodex.com/product_view.do?fId=2ETF01'
#
url2 = 'https://m.kodex.com/excel_pdf.do?fId=2ETF01&gijunYMD=20220118'
kospi200df=pd.read_excel(url2, skiprows=2)
print(kospi200df.shape)
kospi200df.head()

kospi200Set = set(kospi200df['종목코드'].unique())

kosdaq150Set = set(kosdaq150df['종목코드'].unique())

k350List = list (kospi200Set.union(kosdaq150Set))

k350List.remove('KRD010010001')

len(k350List)

print(k350List)

sDate = datetime.date(2000, 1, 1)
today = datetime.datetime.now()
eDate = datetime.date(today.year, today.month, today.day)
print(eDate)
eDate = datetime.date(2012,12,31)
print(eDate)
#print(sDate.year)

kq11_df = fdr.DataReader('KQ11', sDate.year)
ks11_df = fdr.DataReader('KS11', sDate.year)

kq11_df.head()
ks11_df.head()
ks11_df.tail()

eDate = datetime.date(2021,12,31)
dType = 'KOSDAQ'
dType = 'KOSPI'
if dType == 'KOSPI':
  df = ks11_df
else:
  df = kq11_df

df_result = pd.DataFrame()

for dateDiff in (1, 5, 10, 15, 30, 60, 125):
  numLoss = 0
  numWin = 0
  numStalemate = 0
  for (index, row), ii in zip(df.iterrows(), range(len(df.index))):
    if index.date() <= eDate and index.date() >= sDate:
      #index: current row index
      #row: current row
      #df.iloc[ii-1]: prv row (of course make sure, prv row is present)
      #df.iloc[ii+1]: next row (of course make sure, next row is present)
      #print(index, row['Close'], df.iloc[ii-1]['Close'], df.iloc[ii+1]['Close'])
      if row['Close'] > df.iloc[ii-dateDiff]['Close']:
        numWin +=1
      elif row['Close'] < df.iloc[ii-dateDiff]['Close']:
        numLoss +=1
      else:
        numStalemate +=1
  numTot = numWin+numLoss+numStalemate
  print(dateDiff, numWin/numTot, numLoss/numTot, numStalemate/numTot)
  new_row = {'days':dateDiff, 'win %':numWin/numTot*100}
  #append row to the dataframe
  df_result = df_result.append(new_row, ignore_index=True)

df_result
import matplotlib.pyplot as plt

#df_result.plot(kind='line', x='days', y = 'win %')
fig1, ax = plt.subplots()

x = [int(a) for a in list(df_result['days'])]
xi = list(range(len(x)))
y = list(df_result['win %'])
#plt.ylim(0.4,0.65)
# plot the index for the x-values
#fig, ax = plt.subplots()
ax.plot(xi, y, color='b')
ax.set_xlabel('Timeframe - days')
ax.set_ylabel('Probability (%)') 
ax.set_title('Positive Return Probability for Korean Stocks - %s; %s - %s' % (dType, sDate.strftime('%m/%d/%Y'), eDate.strftime('%m/%d/%Y')))
#ax.set_xticklabels(x)
ax.set_xticks(ticks=xi)
ax.set_xticklabels(x)
fig1.savefig('1.png')
import streamlit as st

#fig, ax = plt.subplots()
#ax.hist(arr, bins=20)

st.pyplot(fig1)
#st.line_chart(df_result)

